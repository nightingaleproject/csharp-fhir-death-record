<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VRDRMessaging</name>
    </assembly>
    <members>
        <member name="T:VRDR.AckMessage">
            <summary>Class <c>AckMessage</c> supports the acknowledgment of other messages.</summary>
        </member>
        <member name="M:VRDR.AckMessage.#ctor(VRDR.BaseMessage,System.String)">
            <summary>Constructor that creates an acknowledgement for the specified message.</summary>
            <param name="messageToAck">the message to create an acknowledgement for.</param>
            <param name="source">the endpoint identifier that the ack message will be sent from.</param>
        </member>
        <member name="M:VRDR.AckMessage.#ctor(System.String,System.String,System.String)">
            <summary>Constructor that creates an acknowledgement for the specified message.</summary>
            <param name="messageId">the id of the message to create an acknowledgement for.</param>
            <param name="destination">the endpoint identifier that the ack message will be sent to.</param>
            <param name="source">the endpoint identifier that the ack message will be sent from.</param>
        </member>
        <member name="M:VRDR.AckMessage.#ctor(System.String,System.Boolean)">
            <summary>Constructor that takes a string that represents an AckMessage in either XML or JSON format.</summary>
            <param name="message">represents an AckMessage in either XML or JSON format.</param>
            <param name="permissive">if the parser should be permissive when parsing the given string</param>
            <exception cref="T:System.ArgumentException">Message is neither valid XML nor JSON.</exception>
        </member>
        <member name="P:VRDR.AckMessage.AckedMessageId">
            <summary>The id of the message that is being acknowledged by this message</summary>
            <value>the message id.</value>
        </member>
        <member name="T:VRDR.BaseMessage">
            <summary>Class <c>BaseMessage</c> is the base class of all messages.</summary>
        </member>
        <member name="F:VRDR.BaseMessage.Navigator">
            <summary>Useful for navigating around the FHIR Bundle using FHIRPaths.</summary>
        </member>
        <member name="F:VRDR.BaseMessage.MessageBundle">
            <summary>Bundle that contains the message.</summary>
        </member>
        <member name="F:VRDR.BaseMessage.Header">
            <summary>MessageHeader that contains the message header.</summary>
        </member>
        <member name="M:VRDR.BaseMessage.#ctor(System.String)">
            <summary>Constructor that creates a new, empty message for the specified message type.</summary>
        </member>
        <member name="M:VRDR.BaseMessage.#ctor(System.String,System.Boolean)">
            <summary>Constructor that takes a string that represents a DeathRecordSubmission message in either XML or JSON format.</summary>
            <param name="message">represents a DeathRecordSubmission message in either XML or JSON format.</param>
            <param name="permissive">if the parser should be permissive when parsing the given string</param>
            <exception cref="T:System.ArgumentException">Message is neither valid XML nor JSON.</exception>
        </member>
        <member name="M:VRDR.BaseMessage.ToXML">
            <summary>Helper method to return a XML string representation of this DeathRecordSubmission.</summary>
            <returns>a string representation of this DeathRecordSubmission in XML format</returns>
        </member>
        <member name="M:VRDR.BaseMessage.ToXml">
            <summary>Helper method to return a XML string representation of this DeathRecordSubmission.</summary>
            <returns>a string representation of this DeathRecordSubmission in XML format</returns>
        </member>
        <member name="M:VRDR.BaseMessage.ToJSON">
            <summary>Helper method to return a JSON string representation of this DeathRecordSubmission.</summary>
            <returns>a string representation of this DeathRecordSubmission in JSON format</returns>
        </member>
        <member name="M:VRDR.BaseMessage.ToJson">
            <summary>Helper method to return a JSON string representation of this DeathRecordSubmission.</summary>
            <returns>a string representation of this DeathRecordSubmission in JSON format</returns>
        </member>
        <member name="M:VRDR.BaseMessage.GetITypedElement">
            <summary>Helper method to return an ITypedElement of the message bundle.</summary>
            <returns>an ITypedElement of the message bundle</returns>
        </member>
        <member name="P:VRDR.BaseMessage.MessageTimestamp">
            <summary>Message timestamp</summary>
            <value>the message timestamp.</value>
        </member>
        <member name="P:VRDR.BaseMessage.MessageId">
            <summary>Message Id</summary>
            <value>the message id.</value>
        </member>
        <member name="P:VRDR.BaseMessage.MessageType">
            <summary>Message Type</summary>
            <value>the message type.</value>
        </member>
        <member name="P:VRDR.BaseMessage.MessageSource">
            <summary>Message Source</summary>
            <value>the message source.</value>
        </member>
        <member name="P:VRDR.BaseMessage.MessageDestination">
            <summary>Message Destination</summary>
            <value>the message destination.</value>
        </member>
        <member name="M:VRDR.BaseMessage.RestoreReferences">
            <summary>Restores class references from a newly parsed record.</summary>
        </member>
        <member name="T:VRDR.DeathRecordSubmission">
            <summary>Class <c>DeathRecordSubmission</c> supports the submission of VRDR records.</summary>
        </member>
        <member name="F:VRDR.DeathRecordSubmission.Payload">
            <summary>Bundle that contains the message payload.</summary>
        </member>
        <member name="M:VRDR.DeathRecordSubmission.#ctor">
            <summary>Default constructor that creates a new, empty DeathRecordSubmission.</summary>
        </member>
        <member name="M:VRDR.DeathRecordSubmission.#ctor(VRDR.DeathRecord)">
            <summary>Constructor that takes a VRDR.DeathRecord and wraps it in a DeathRecordSubmission.</summary>
            <param name="record">the VRDR.DeathRecord to create a DeathRecordSubmission for.</param>
        </member>
        <member name="M:VRDR.DeathRecordSubmission.#ctor(System.String,System.Boolean)">
            <summary>Constructor that takes a string that represents a DeathRecordSubmission message in either XML or JSON format.</summary>
            <param name="message">represents a DeathRecordSubmission message in either XML or JSON format.</param>
            <param name="permissive">if the parser should be permissive when parsing the given string</param>
            <exception cref="T:System.ArgumentException">Message is neither valid XML nor JSON.</exception>
        </member>
        <member name="P:VRDR.DeathRecordSubmission.MessagePayload">
            <summary>Message payload</summary>
            <value>the message payload as a FHIR Bundle.</value>
        </member>
        <member name="M:VRDR.DeathRecordSubmission.RestoreReferences">
            <summary>Restores class references from a newly parsed record.</summary>
        </member>
        <member name="T:VRDR.DeathRecordUpdate">
            <summary>Class <c>DeathRecordUpdate</c> supports the update of VRDR records.</summary>
        </member>
        <member name="M:VRDR.DeathRecordUpdate.#ctor">
            <summary>Default constructor that creates a new, empty DeathRecordUpdate.</summary>
        </member>
        <member name="M:VRDR.DeathRecordUpdate.#ctor(VRDR.DeathRecord)">
            <summary>Constructor that takes a VRDR.DeathRecord and wraps it in a DeathRecordUpdate.</summary>
            <param name="record">the VRDR.DeathRecord to create a DeathRecordUpdate for.</param>
        </member>
        <member name="M:VRDR.DeathRecordUpdate.#ctor(System.String,System.Boolean)">
            <summary>Constructor that takes a string that represents a DeathRecordUpdate message in either XML or JSON format.</summary>
            <param name="message">represents a DeathRecordUpdate message in either XML or JSON format.</param>
            <param name="permissive">if the parser should be permissive when parsing the given string</param>
            <exception cref="T:System.ArgumentException">Message is neither valid XML nor JSON.</exception>
        </member>
    </members>
</doc>
