<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VRDRMessaging</name>
    </assembly>
    <members>
        <member name="T:VRDR.AckMessage">
            <summary>Class <c>AckMessage</c> supports the acknowledgment of other messages.</summary>
        </member>
        <member name="M:VRDR.AckMessage.#ctor(VRDR.BaseMessage)">
            <summary>Constructor that creates an acknowledgement for the specified message.</summary>
            <param name="messageToAck">the message to create an acknowledgement for.</param>
        </member>
        <member name="M:VRDR.AckMessage.#ctor(Hl7.Fhir.Model.Bundle)">
            <summary>
            Construct an AckMessage from a FHIR Bundle.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the AckMessage</param>
            <returns></returns>
        </member>
        <member name="M:VRDR.AckMessage.#ctor(System.String,System.String,System.String)">
            <summary>Constructor that creates an acknowledgement for the specified message.</summary>
            <param name="messageId">the id of the message to create an acknowledgement for.</param>
            <param name="destination">the endpoint identifier that the ack message will be sent to.</param>
            <param name="source">the endpoint identifier that the ack message will be sent from.</param>
        </member>
        <member name="P:VRDR.AckMessage.AckedMessageId">
            <summary>The id of the message that is being acknowledged by this message</summary>
            <value>the message id.</value>
        </member>
        <member name="T:VRDR.BaseMessage">
            <summary>Class <c>BaseMessage</c> is the base class of all messages.</summary>
        </member>
        <member name="F:VRDR.BaseMessage.MessageBundle">
            <summary>Bundle that contains the message.</summary>
        </member>
        <member name="F:VRDR.BaseMessage.Record">
            <summary>
            A Parameters entry that contains business identifiers for all messages plus additional information for Coding messages.
            </summary>
        </member>
        <member name="F:VRDR.BaseMessage.Header">
            <summary>MessageHeader that contains the message header.</summary>
        </member>
        <member name="M:VRDR.BaseMessage.#ctor(Hl7.Fhir.Model.Bundle,System.Boolean,System.Boolean)">
            <summary>
            Construct a BaseMessage from a FHIR Bundle. This constructor will also validate that the Bundle
            represents a FHIR message of the correct type.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the BaseMessage</param>
            <param name="ignoreMissingEntries">if true, then missing bundle entries will not result in an exception</param>
            <param name="ignoreBundleType">if true, then an incorrect bundle type will not result in an exception</param>
        </member>
        <member name="M:VRDR.BaseMessage.findEntry``1(Hl7.Fhir.Model.ResourceType,System.Boolean)">
            <summary>
            Find the first Entry within the message Bundle that contains a Resource of the specified type and return that resource.
            </summary>
            <param name="type">the type of FHIR resource to look for</param>
            <param name="ignoreMissingEntries">if true, then missing entries will not result in an exception</param>
            <typeparam name="T">the class of the FHIR resource to return, must match with specified type:</typeparam>
            <returns>The first matching Bundle entry</returns>
        </member>
        <member name="M:VRDR.BaseMessage.#ctor(System.String)">
            <summary>Constructor that creates a new, empty message for the specified message type.</summary>
        </member>
        <member name="M:VRDR.BaseMessage.ExtractBusinessIdentifiers(VRDR.DeathRecord)">
            <summary>
            Extract the business identifiers for the message from the supplied death record.
            </summary>
            <param name="from">the death record to extract the identifiers from</param>
        </member>
        <member name="M:VRDR.BaseMessage.ToXML(System.Boolean)">
            <summary>Helper method to return a XML string representation of this DeathRecordSubmission.</summary>
            <param name="prettyPrint">controls whether the returned string is formatted for human readability (true) or compact (false)</param>
            <returns>a string representation of this DeathRecordSubmission in XML format</returns>
        </member>
        <member name="M:VRDR.BaseMessage.ToXml(System.Boolean)">
            <summary>Helper method to return a XML string representation of this DeathRecordSubmission.</summary>
            <param name="prettyPrint">controls whether the returned string is formatted for human readability (true) or compact (false)</param>
            <returns>a string representation of this DeathRecordSubmission in XML format</returns>
        </member>
        <member name="M:VRDR.BaseMessage.ToJSON(System.Boolean)">
            <summary>Helper method to return a JSON string representation of this DeathRecordSubmission.</summary>
            <param name="prettyPrint">controls whether the returned string is formatted for human readability (true) or compact (false)</param>
            <returns>a string representation of this DeathRecordSubmission in JSON format</returns>
        </member>
        <member name="M:VRDR.BaseMessage.ToJson(System.Boolean)">
            <summary>Helper method to return a JSON string representation of this DeathRecordSubmission.</summary>
            <param name="prettyPrint">controls whether the returned string is formatted for human readability (true) or compact (false)</param>
            <returns>a string representation of this DeathRecordSubmission in JSON format</returns>
        </member>
        <member name="P:VRDR.BaseMessage.MessageTimestamp">
            <summary>Message timestamp</summary>
            <value>the message timestamp.</value>
        </member>
        <member name="P:VRDR.BaseMessage.MessageId">
            <summary>Message Id</summary>
            <value>the message id.</value>
        </member>
        <member name="P:VRDR.BaseMessage.MessageType">
            <summary>Message Type</summary>
            <value>the message type.</value>
        </member>
        <member name="P:VRDR.BaseMessage.MessageSource">
            <summary>Message Source</summary>
            <value>the message source.</value>
        </member>
        <member name="P:VRDR.BaseMessage.MessageDestination">
            <summary>Message Destination</summary>
            <value>the message destination.</value>
        </member>
        <member name="P:VRDR.BaseMessage.CertificateNumber">
            <summary>Jurisdiction-assigned death certificate number</summary>
        </member>
        <member name="P:VRDR.BaseMessage.StateAuxiliaryIdentifier">
            <summary>Jurisdiction-assigned auxiliary identifier</summary>
        </member>
        <member name="P:VRDR.BaseMessage.DeathYear">
            <summary>The year in which the death occurred</summary>
        </member>
        <member name="P:VRDR.BaseMessage.DeathJurisdictionID">
            <summary>Two character identifeir of the jurisdiction in which the death occrred</summary>
        </member>
        <member name="P:VRDR.BaseMessage.NCHSIdentifier">
            <summary>NCHS identifier. Format is 4-digit year, two character jurisdiction id, six character/digit certificate id.</summary>
        </member>
        <member name="M:VRDR.BaseMessage.Parse``1(System.IO.StreamReader,System.Boolean)">
            <summary>
            Parse an XML or JSON serialization of a FHIR Bundle and construct the appropriate subclass of
            BaseMessage. The new object is checked to ensure it the same or a subtype of the type parameter.
            </summary>
            <typeparam name="T">the expected message type</typeparam>
            <param name="source">the XML or JSON serialization of a FHIR Bundle</param>
            <param name="permissive">if the parser should be permissive when parsing the given string</param>
            <returns>The deserialized message object</returns>
            <exception cref="T:VRDR.MessageParseException">Thrown when source does not represent the same or a subtype of the type parameter.</exception>
        </member>
        <member name="M:VRDR.BaseMessage.Parse``1(System.String,System.Boolean)">
            <summary>
            Parse an XML or JSON serialization of a FHIR Bundle and construct the appropriate subclass of
            BaseMessage. The new object is checked to ensure it the same or a subtype of the type parameter.
            </summary>
            <typeparam name="T">the expected message type</typeparam>
            <param name="source">the XML or JSON serialization of a FHIR Bundle</param>
            <param name="permissive">if the parser should be permissive when parsing the given string</param>
            <returns>the deserialized message object</returns>
            <exception cref="T:VRDR.MessageParseException">thrown when source does not represent the same or a subtype of the type parameter.</exception>
        </member>
        <member name="M:VRDR.BaseMessage.Parse(System.String,System.Boolean)">
            <summary>
            Parse an XML or JSON serialization of a FHIR Bundle and construct the appropriate subclass of
            BaseMessage. Clients can use the typeof operator to determine the type of message object returned.
            </summary>
            <param name="source">the XML or JSON serialization of a FHIR Bundle</param>
            <param name="permissive">if the parser should be permissive when parsing the given string</param>
            <returns>The deserialized message object</returns>
        </member>
        <member name="M:VRDR.BaseMessage.Parse(System.IO.StreamReader,System.Boolean)">
            <summary>
            Parse an XML or JSON serialization of a FHIR Bundle and construct the appropriate subclass of
            BaseMessage. Clients can use the typeof operator to determine the type of message object returned.
            </summary>
            <param name="source">the XML or JSON serialization of a FHIR Bundle</param>
            <param name="permissive">if the parser should be permissive when parsing the given string</param>
            <returns>The deserialized message object</returns>
        </member>
        <member name="T:VRDR.MessageParseException">
            <summary>
            An exception that may be thrown during message parsing
            </summary>
        </member>
        <member name="M:VRDR.MessageParseException.#ctor(System.String,VRDR.BaseMessage)">
            <summary>
            Construct a new instance.
            </summary>
            <param name="errorMessage">A text error message describing the problem</param>
            <param name="sourceMessage">The message that cuased the problem</param>
        </member>
        <member name="M:VRDR.MessageParseException.CreateExtractionErrorMessage">
            <summary>
            Build an ExtractionErrorMessage that conveys the issues reported in this exception.
            </summary>
        </member>
        <member name="T:VRDR.CodingResponseMessage">
            <summary>Class <c>CodingResponseMessage</c> conveys the coded cause of death, race and ethnicity of a decedent.</summary>
        </member>
        <member name="M:VRDR.CodingResponseMessage.#ctor(VRDR.BaseMessage,System.String)">
            <summary>Constructor that creates a response for the specified message.</summary>
            <param name="sourceMessage">the message to create a response for.</param>
            <param name="source">the endpoint identifier that the message will be sent from.</param>
        </member>
        <member name="M:VRDR.CodingResponseMessage.#ctor(Hl7.Fhir.Model.Bundle)">
            <summary>
            Construct a CodingResponseMessage from a FHIR Bundle.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the CodingResponseMessage</param>
            <returns></returns>
        </member>
        <member name="M:VRDR.CodingResponseMessage.#ctor(System.String,System.String)">
            <summary>Constructor that creates a response for the specified message.</summary>
            <param name="destination">the endpoint identifier that the response message will be sent to.</param>
            <param name="source">the endpoint identifier that the response message will be sent from.</param>
        </member>
        <member name="T:VRDR.CodingResponseMessage.HispanicOrigin">
            <summary>Ethnicity codes</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.HispanicOrigin.DETHNICE">
            <summary>Edited Hispanic Origin Code</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.HispanicOrigin.DETHNIC5C">
            <summary>Hispanic Code for Literal</summary>
        </member>
        <member name="P:VRDR.CodingResponseMessage.Ethnicity">
            <summary>Decedent ethnicity coding</summary>
        </member>
        <member name="T:VRDR.CodingResponseMessage.RaceCode">
            <summary>Race codes</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.RaceCode.RACE1E">
            <summary>First Edited Code</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.RaceCode.RACE2E">
            <summary>Second Edited Code</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.RaceCode.RACE3E">
            <summary>Third Edited Code</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.RaceCode.RACE4E">
            <summary>Fourth Edited Code</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.RaceCode.RACE5E">
            <summary>Fifth Edited Code</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.RaceCode.RACE6E">
            <summary>Sixth Edited Code</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.RaceCode.RACE7E">
            <summary>Seventh Edited Code</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.RaceCode.RACE8E">
            <summary>Eighth Edited Code</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.RaceCode.RACE16C">
            <summary>First Am. Ind Code</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.RaceCode.RACE17C">
            <summary>Second Am. Ind Code</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.RaceCode.RACE18C">
            <summary>First Other Asian Code</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.RaceCode.RACE19C">
            <summary>Second Other Asian Code</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.RaceCode.RACE20C">
            <summary>First Other PI Code</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.RaceCode.RACE21C">
            <summary>Second Other Pi Code</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.RaceCode.RACE22C">
            <summary>First Other Code</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.RaceCode.RACE23C">
            <summary>Second Other Code</summary>
        </member>
        <member name="F:VRDR.CodingResponseMessage.RaceCode.RACEBRG">
            <summary>Bridged Multiple Race Code</summary>
        </member>
        <member name="P:VRDR.CodingResponseMessage.Race">
            <summary>Decedent race coding</summary>
        </member>
        <member name="P:VRDR.CodingResponseMessage.UnderlyingCauseOfDeath">
            <summary>Underlying cause of death code (ICD-10)</summary>
        </member>
        <member name="P:VRDR.CodingResponseMessage.CauseOfDeathRecordAxis">
            <summary>Record axis coding of cause of death</summary>
        </member>
        <member name="P:VRDR.CodingResponseMessage.CauseOfDeathEntityAxis">
            <summary>Entity axis cause of death coding grouped by line. An alternate flat list of entity axis codes
            is available via the CauseOfDeathEntityAxisList property, <see cref="P:VRDR.CodingResponseMessage.CauseOfDeathEntityAxisList"/></summary>
        </member>
        <member name="P:VRDR.CodingResponseMessage.CauseOfDeathEntityAxisList">
            <summary>
            Entity axis cause of death coding as a flat list. Provided as an alternative to the
            CauseOfDeathEntityAxis property which groups cause codes by line, <see cref="P:VRDR.CodingResponseMessage.CauseOfDeathEntityAxis"/>.
            </summary>
            <para>Each entry in the list is a tuple with three values:</para>
            <list type="bullet">
            <item>Line: <see cref="F:VRDR.CauseOfDeathEntityAxisEntry.LineNumber"/></item>
            <item>Position: Sequence of code within the line</item>
            <item>Code>: ICD code</item>
            </list>
        </member>
        <member name="T:VRDR.CauseOfDeathEntityAxisEntry">
            <summary>Class for structuring a cause of death entity axis entry</summary>
        </member>
        <member name="F:VRDR.CauseOfDeathEntityAxisEntry.LineNumber">
            <summary>Identifies the line number (values "1" to "6") of the corresponding cause of death entered on the 
            death certificate. The following list shows the corresponding line in the death certificate for each value.</summary>
            <list type="number">
            <item>Part I. Line a</item>
            <item>Part I. Line b</item>
            <item>Part I. Line c</item>
            <item>Part I. Line d</item>
            <item>Part I. Line e</item>
            <item>Part II</item>
            </list>
        </member>
        <member name="F:VRDR.CauseOfDeathEntityAxisEntry.AssignedCodes">
            <summary>The codes assigned for one of the cause of death entries in the death certificate.</summary>
        </member>
        <member name="M:VRDR.CauseOfDeathEntityAxisEntry.#ctor(System.String)">
            <summary>Create a CauseOfDeathEntityAxisEntry with the specified line identifier</summary>
            <param name="lineNumber"><see cref="F:VRDR.CauseOfDeathEntityAxisEntry.LineNumber"/></param>
        </member>
        <member name="M:VRDR.CauseOfDeathEntityAxisEntry.#ctor(System.String,System.Collections.Generic.List{System.String})">
            <summary>Create a CauseOfDeathEntityAxisEntry with the specified line identifier and corresponding codes</summary>
            <param name="lineNumber"><see cref="F:VRDR.CauseOfDeathEntityAxisEntry.LineNumber"/></param>
            <param name="codes">list of codes</param>
        </member>
        <member name="T:VRDR.CauseOfDeathEntityAxisBuilder">
            <summary>
            Helper class for building a List&lt;CauseOfDeathEntityAxis&gt; from a flat file. Groups codes
            into one <c>CauseOfDeathEntityAxisEntry</c> per line and sorts codes by position.
            </summary>
        </member>
        <member name="M:VRDR.CauseOfDeathEntityAxisBuilder.#ctor">
            <summary>
            Construct a new empty instance.
            </summary>
        </member>
        <member name="M:VRDR.CauseOfDeathEntityAxisBuilder.ToCauseOfDeathEntityAxis">
            <summary>
            Build a List&lt;CauseOfDeathEntityAxis&gt; from the currently contained set of codes.
            </summary>
            <returns>cause of death entity axis coding list</returns>
        </member>
        <member name="M:VRDR.CauseOfDeathEntityAxisBuilder.Add(System.String,System.String,System.String)">
            <summary>
            Add a code to the list of codes that will be used to build a List&lt;CauseOfDeathEntityAxis&gt;.
            Order of code addition is not significant, codes will be ordered by <c>line</c> and <c>position</c>
            by the <c>ToCauseOfDeathEntityAxis</c> method.
            </summary>
            <param name="lineNumber"><see cref="F:VRDR.CauseOfDeathEntityAxisEntry.LineNumber"/></param>
            <param name="position">Sequence within line</param>
            <param name="code">ICD code</param>
            <exception cref="T:System.ArgumentException">Thrown if <c>line</c> or <c>position</c> is not a number</exception>
        </member>
        <member name="T:VRDR.CodingUpdateMessage">
            <summary>Class <c>CodingUpdateMessage</c> conveys an updated coded cause of death, race and ethnicity of a decedent.</summary>
        </member>
        <member name="M:VRDR.CodingUpdateMessage.#ctor(VRDR.BaseMessage,System.String)">
            <summary>Constructor that creates an update for the specified message.</summary>
            <param name="sourceMessage">the message to create a response for.</param>
            <param name="source">the endpoint identifier that the message will be sent from.</param>
        </member>
        <member name="M:VRDR.CodingUpdateMessage.#ctor(Hl7.Fhir.Model.Bundle)">
            <summary>
            Construct a CodingResponseMessage from a FHIR Bundle.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the CodingResponseMessage</param>
            <returns></returns>
        </member>
        <member name="M:VRDR.CodingUpdateMessage.#ctor(System.String,System.String)">
            <summary>Constructor that creates a response for the specified message.</summary>
            <param name="destination">the endpoint identifier that the response message will be sent to.</param>
            <param name="source">the endpoint identifier that the response message will be sent from.</param>
        </member>
        <member name="T:VRDR.DeathRecordSubmission">
            <summary>Class <c>DeathRecordSubmission</c> supports the submission of VRDR records.</summary>
        </member>
        <member name="F:VRDR.DeathRecordSubmission.deathRecord">
            <summary>Bundle that contains the message payload.</summary>
        </member>
        <member name="M:VRDR.DeathRecordSubmission.#ctor">
            <summary>Default constructor that creates a new, empty DeathRecordSubmission.</summary>
        </member>
        <member name="M:VRDR.DeathRecordSubmission.#ctor(VRDR.DeathRecord)">
            <summary>Constructor that takes a VRDR.DeathRecord and wraps it in a DeathRecordSubmission.</summary>
            <param name="record">the VRDR.DeathRecord to create a DeathRecordSubmission for.</param>
        </member>
        <member name="M:VRDR.DeathRecordSubmission.#ctor(Hl7.Fhir.Model.Bundle,VRDR.BaseMessage)">
            <summary>
            Construct a DeathRecordSubmission from a FHIR Bundle.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the DeathRecordSubmission</param>
            <param name="baseMessage">the BaseMessage instance that was constructed during parsing that can be used in a MessageParseException if needed</param>
        </member>
        <member name="P:VRDR.DeathRecordSubmission.DeathRecord">
            <summary>The DeathRecord conveyed by this message</summary>
            <value>the DeathRecord</value>
        </member>
        <member name="T:VRDR.DeathRecordUpdate">
            <summary>Class <c>DeathRecordUpdate</c> supports the update of VRDR records.</summary>
        </member>
        <member name="M:VRDR.DeathRecordUpdate.#ctor">
            <summary>Default constructor that creates a new, empty DeathRecordUpdate.</summary>
        </member>
        <member name="M:VRDR.DeathRecordUpdate.#ctor(VRDR.DeathRecord)">
            <summary>Constructor that takes a VRDR.DeathRecord and wraps it in a DeathRecordUpdate.</summary>
            <param name="record">the VRDR.DeathRecord to create a DeathRecordUpdate for.</param>
        </member>
        <member name="M:VRDR.DeathRecordUpdate.#ctor(Hl7.Fhir.Model.Bundle,VRDR.BaseMessage)">
            <summary>
            Construct a DeathRecordUpdate from a FHIR Bundle.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the DeathRecordUpdate</param>
            <param name="baseMessage">the BaseMessage instance that was constructed during parsing that can be used in a MessageParseException if needed</param>
        </member>
        <member name="T:VRDR.ExtractionErrorMessage">
            <summary>Class <c>ExtractionErrorMessage</c> is used to communicate that initial processing of a DeathRecordSubmission message failed.</summary>
        </member>
        <member name="M:VRDR.ExtractionErrorMessage.#ctor(VRDR.BaseMessage)">
            <summary>Constructor that creates an extraction error for the specified message.</summary>
            <param name="sourceMessage">the message that could not be processed.</param>
        </member>
        <member name="M:VRDR.ExtractionErrorMessage.#ctor(Hl7.Fhir.Model.Bundle,VRDR.BaseMessage)">
            <summary>
            Construct an ExtractionErrorMessage from a FHIR Bundle.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the ExtractionErrorMessage</param>
            <param name="baseMessage">the BaseMessage instance that was constructed during parsing that can be used in a MessageParseException if needed</param>
        </member>
        <member name="M:VRDR.ExtractionErrorMessage.#ctor(System.String,System.String,System.String)">
            <summary>Constructor that creates an extraction error message for the specified message.</summary>
            <param name="messageId">the id of the message to create an extraction error for.</param>
            <param name="destination">the endpoint identifier that the extraction error message will be sent to.</param>
            <param name="source">the endpoint identifier that the extraction error message will be sent from.</param>
        </member>
        <member name="P:VRDR.ExtractionErrorMessage.FailedMessageId">
            <summary>The id of the message that could not be extracted</summary>
            <value>the message id.</value>
        </member>
        <member name="P:VRDR.ExtractionErrorMessage.Issues">
            <summary>
            List of issues found when attenpting to extract the message
            </summary>
            <value>list of issues</value>
        </member>
        <member name="T:VRDR.Issue">
            <summary>
            Class representing an issue detected during message processing.
            </summary>
        </member>
        <member name="F:VRDR.Issue.Severity">
            <summary>
            Severity of the issue
            </summary>
        </member>
        <member name="F:VRDR.Issue.Type">
            <summary>
            Type of the issue
            </summary>
        </member>
        <member name="F:VRDR.Issue.Description">
            <summary>
            Human readable description of the issue
            </summary>
        </member>
        <member name="M:VRDR.Issue.#ctor(System.Nullable{Hl7.Fhir.Model.OperationOutcome.IssueSeverity},System.Nullable{Hl7.Fhir.Model.OperationOutcome.IssueType},System.String)">
            <summary>
            Construct a new Issue
            </summary>
            <param name="severity">the severity of the issue</param>
            <param name="type">the type of issue</param>
            <param name="description">a human readable description of the issue</param>
        </member>
        <member name="T:VRDR.VoidMessage">
            <summary>Class <c>VoidMessage</c> indicates that a previously submitted DeathRecordSubmission message should be voided.</summary>
        </member>
        <member name="M:VRDR.VoidMessage.#ctor">
            <summary>Default constructor that creates a new, empty VoidMessage.</summary>
        </member>
        <member name="M:VRDR.VoidMessage.#ctor(Hl7.Fhir.Model.Bundle)">
            <summary>
            Construct a VoidMessage from a FHIR Bundle.
            </summary>
            <param name="messageBundle">a FHIR Bundle that will be used to initialize the VoidMessage</param>
            <returns></returns>
        </member>
        <member name="M:VRDR.VoidMessage.#ctor(VRDR.DeathRecord)">
            <summary>Constructor that takes a VRDR.DeathRecord and creates a message to void that record.</summary>
            <param name="record">the VRDR.DeathRecord to create a VoidMessage for.</param>
        </member>
        <member name="P:VRDR.VoidMessage.BlockCount">
            <summary>The number of records to void starting at the certificate number specified by the `CertificateNumber` parameter</summary>
        </member>
    </members>
</doc>
